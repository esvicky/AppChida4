path /users/{uid} is User {
    read() { isAuthenticated() }
    write() { isCurrentUser(uid) }
}

path /police is Police {
    read() { true }
    write() { false }
}

type Members extends Member[] {}
type Tracks extends Track[] {}
type Events extends Event[] {}

type User {
    emergency: Emergency,
    profile: Profile,
    members: Members
}

type Emergency {
    status: Boolean,
    events: Events
}

type Event {
    tracking: Tracks
}

type Track {
    lat: Number,
    long: Number
}

type Profile {
    name: String,
    email: String,
    phone: String,
    emailNotifications: Boolean,
    phoneNotifications: Boolean
}

type Member {
    name: String,
    phone: String,
    email: String,
    done: Boolean
}

type Police {
    name: String,
    email: String,
    phone: String
}

isAuthenticated() { auth != null }
isCurrentUser(uid) { auth != null && auth.uid == uid }
